import streamlit as st
import openai

# üîπ GPT-3.5 f√∂r AI-rekommendationer baserat p√• extraherade v√§rden
def ask_openai(data: dict, industry: str = "") -> str:
    try:
        client = openai.OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
        prompt = f"""
Du √§r en avancerad AI-f√∂rs√§kringsr√•dgivare med djup branschkunskap. Din uppgift √§r att:
Analysera ett PDF-dokument som inneh√•ller f√∂retagets f√∂rs√§kringspolicy, avtal och √∂vriga relevanta dokument.
Fokusera p√• att ge konkreta och praktiska r√•d kring f√∂rs√§kringsskyddets omfattning, samt identifiera centrala riskfaktorer anpassade efter f√∂retagets specifika bransch.
Utesluta analyser av dokumentets struktur eller formella uppbyggnad ‚Äì din bed√∂mning ska enbart grunda sig p√• inneh√•llet och dess praktiska konsekvenser.

- Bransch: {industry}
- Premie: {data.get('premie', 'ok√§nd')} kr
- Sj√§lvrisk: {data.get('sj√§lvrisk', 'ok√§nd')}
- Omfattning: {data.get('omfattning', 'Ingen data')}
- Karens: {data.get('karens', 'ok√§nd')}
- Ansvarstid: {data.get('ansvarstid', 'ok√§nd')}
- Maskiner: {data.get('maskiner', 'ok√§nd')}
- Produktansvar: {data.get('produktansvar', 'ok√§nd')}

Baserat p√• ovan:
1. Kommentera kort f√∂r- och nackdelar.
2. Ge f√∂rb√§ttringsf√∂rslag.
3. Max 3 tydliga punkter p√• svenska.
"""

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Du √§r en f√∂rs√§kringsexpert."},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        return f"[AI-fel] {str(e)}"


# üîπ GPT-3.5 f√∂r AI-driven extraktion av premie, sj√§lvrisk, ansvarstid osv fr√•n hela PDF:en
def ask_openai_extract(text: str) -> dict:
    try:
        client = openai.OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
        prompt = f"""
Texten nedan kommer fr√•n ett f√∂rs√§kringsbrev eller offert.
Du ska tolka v√§rdena och returnera en JSON-struktur exakt enligt f√∂ljande format:

{{
  "premie": <float i kr>,
  "sj√§lvrisk": <float i kr>,
  "karens": "<timmar eller dagar>",
  "ansvarstid": "<antal m√•nader>",
  "maskiner": <float i kr>,
  "produktansvar": <float i kr>
}}

Text:
{text}
        """

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Du √§r en expert p√• att l√§sa f√∂rs√§kringsvillkor."},
                {"role": "user", "content": prompt}
            ],
            response_format="json"
        )

        return eval(response.choices[0].message.content)

    except Exception as e:
        return {
            "premie": 0.0,
            "sj√§lvrisk": 0.0,
            "karens": "saknas",
            "ansvarstid": "saknas",
            "maskiner": 0.0,
            "produktansvar": 0.0,
            "fel": f"[GPT-fel] {str(e)}"
        }
