import streamlit as st
import openai
import json

# üîπ AI-r√•dgivning baserat p√• extraherade nyckelv√§rden
def ask_openai(data: dict, industry: str = "") -> str:
    try:
        client = openai.OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

        prompt = f"""
Du √§r en avancerad AI-f√∂rs√§kringsr√•dgivare med djup branschkunskap. Din uppgift √§r att:
Analysera ett f√∂retags f√∂rs√§kringspolicy och identifiera styrkor, svagheter och ge f√∂rb√§ttringsf√∂rslag.
Uteslut all bed√∂mning av dokumentstruktur, fokusera p√• inneh√•ll.

- Bransch: {industry}
- Premie: {data.get('premie', 'ok√§nd')} kr
- Sj√§lvrisk: {data.get('sj√§lvrisk', 'ok√§nd')}
- Maskiner: {data.get('maskiner', 'ok√§nd')} kr
- Varor: {data.get('varor', 'ok√§nd')} kr
- Byggnad: {data.get('byggnad', 'ok√§nd')} kr
- Produktansvar: {data.get('produktansvar', 'ok√§nd')} kr
- R√§ttsskydd: {data.get('r√§ttsskydd', 'ok√§nd')} kr
- Ansvar: {data.get('ansvar', 'ok√§nd')} kr
- GDPR-ansvar: {data.get('gdpr_ansvar', 'ok√§nd')} kr
- Karens: {data.get('karens', 'ok√§nd')}
- Ansvarstid: {data.get('ansvarstid', 'ok√§nd')}

Baserat p√• ovan:
1. Lista f√∂rdelar
2. Lista nackdelar
3. Ge 2‚Äì3 tydliga f√∂rb√§ttringsf√∂rslag p√• svenska
"""

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Du √§r en f√∂rs√§kringsexpert."},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        return f"[AI-fel] {str(e)}"


# üîπ Finjusterad GPT-extraktion f√∂r svenska f√∂rs√§krings-PDF:er
def ask_openai_extract(text: str) -> dict:
    try:
        client = openai.OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

        prompt = f"""
Du √§r en expert p√• att tolka svenska f√∂rs√§kringsbrev och offerter fr√•n bolag som Trygg-Hansa, LF, IF, Dina F√∂rs√§kringar m.fl.
Din uppgift √§r att identifiera och extrahera v√§rden till f√∂ljande JSON-f√§lt, exakt som nedan:

{
  "premie": float,
  "sj√§lvrisk": float,               # Belopp i SEK, konvertera fr√•n t.ex. "0,5 basbelopp"
  "karens": "text",
  "ansvarstid": "text",
  "maskiner": float,
  "produktansvar": float,
  "byggnad": float,
  "r√§ttsskydd": float,
  "ansvar": float,
  "varor": float,
  "transport": float,
  "gdpr_ansvar": float
}

üß† Observera:
- Alla belopp ska konverteras till svenska kronor (SEK).
- Basbelopp f√∂r 2025 √§r 58 800 kr. Om sj√§lvrisk anges i t.ex. "0,2 pbb" ska det konverteras till 11760 kr.
- Om ett f√§lt inte hittas, ange 0 f√∂r siffror eller "saknas" f√∂r text.
- Returnera ENDAST korrekt JSON, utan kommentarer.

Text att analysera:
{text}
"""

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Du √§r en expert p√• att l√§sa och extrahera f√∂rs√§kringsdata i JSON-format."},
                {"role": "user", "content": prompt}
            ]
        )

        raw = response.choices[0].message.content.strip()

        if not raw.startswith("{"):
            raise ValueError("Inget giltigt JSON-svar fr√•n GPT:\n" + raw)

        return json.loads(raw)

    except Exception as e:
        return {
            "premie": 0.0,
            "sj√§lvrisk": 0.0,
            "karens": "saknas",
            "ansvarstid": "saknas",
            "maskiner": 0.0,
            "produktansvar": 0.0,
            "byggnad": 0.0,
            "r√§ttsskydd": 0.0,
            "ansvar": 0.0,
            "varor": 0.0,
            "transport": 0.0,
            "gdpr_ansvar": 0.0,
            "fel": f"[GPT-fel] {str(e)}"
        }
