import streamlit as st
import openai
import json

# üîπ GPT-3.5 f√∂r AI-r√•dgivning baserat p√• extraherade v√§rden
def ask_openai(data: dict, industry: str = "") -> str:
    try:
        client = openai.OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

        prompt = f"""
Du √§r en erfaren AI-f√∂rs√§kringsr√•dgivare med expertis inom f√∂retagsf√∂rs√§kring.
Din uppgift √§r att granska ett f√∂rs√§kringsdokument och ge:
1. F√∂r- och nackdelar med nuvarande f√∂rs√§kringsskydd
2. Praktiska f√∂rb√§ttringsf√∂rslag
3. Kort sammanfattning i tre tydliga punkter p√• svenska

F√∂ljande data har extraherats ur dokumentet:

- Bransch: {industry}
- Premie: {data.get('premie', 'saknas')} kr
- Sj√§lvrisk: {data.get('sj√§lvrisk', 'saknas')} kr
- Karens: {data.get('karens', 'saknas')}
- Ansvarstid: {data.get('ansvarstid', 'saknas')}
- Maskiner: {data.get('maskiner', 'saknas')} kr
- Produktansvar: {data.get('produktansvar', 'saknas')} kr
- R√§ttsskydd: {data.get('r√§ttsskydd', 'saknas')} kr
- GDPR-ansvar: {data.get('gdpr_ansvar', 'saknas')} kr

Analysera detta som om du ger r√•dgivning till ett riktigt f√∂retag.
"""

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Du √§r en expert inom f√∂retagsf√∂rs√§kring och AI-r√•dgivning."},
                {"role": "user", "content": prompt}
            ]
        )

        return response.choices[0].message.content.strip()

    except Exception as e:
        return f"‚ùå [AI-fel] {str(e)}"

# üîπ GPT-3.5-driven strukturell extraktion av nyckelv√§rden
def ask_openai_extract(text: str, industry: str = "") -> dict:
    try:
        client = openai.OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

        extraction_prompt = f"""
Du ska extrahera nyckeldata fr√•n f√∂ljande f√∂rs√§kringstext. Returnera **endast en giltig JSON-struktur** enligt nedan:

Format:
{{
  "premie": float,                   # Belopp i SEK, konvertera fr√•n t.ex. "0,5 basbelopp"
  "sj√§lvrisk": float,                # Belopp i SEK
  "karens": "text",                  # T.ex. "1 dygn" eller "saknas"
  "ansvarstid": "text",              # T.ex. "24 m√•nader" eller "saknas"
  "maskiner": float,                 # Belopp i SEK
  "produktansvar": float,            # Belopp i SEK
  "byggnad": float,                  # Belopp i SEK
  "varor": float,                    # Belopp i SEK
  "transport": float,               # Belopp i SEK
  "ansvar": float,                  # Belopp i SEK
  "r√§ttsskydd": float,              # Belopp i SEK
  "gdpr_ansvar": float              # Belopp i SEK
}}

Texten g√§ller ett f√∂retag inom branschen: {industry}

Text att analysera:
{text}
"""

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Du √§r en AI som extraherar strukturerad f√∂rs√§kringsdata fr√•n text."},
                {"role": "user", "content": extraction_prompt}
            ]
        )

        # S√§ker JSON-parsing
        response_text = response.choices[0].message.content.strip()
        return json.loads(response_text)

    except Exception as e:
        return {
            "premie": 0.0,
            "sj√§lvrisk": 0.0,
            "karens": "saknas",
            "ansvarstid": "saknas",
            "maskiner": 0.0,
            "produktansvar": 0.0,
            "byggnad": 0.0,
            "varor": 0.0,
            "transport": 0.0,
            "ansvar": 0.0,
            "r√§ttsskydd": 0.0,
            "gdpr_ansvar": 0.0,
            "fel": f"[GPT-fel] {str(e)}"
        }
