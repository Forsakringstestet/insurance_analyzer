import streamlit as st
import openai
import json

# üîπ GPT-3.5 f√∂r AI-rekommendationer baserat p√• extraherade v√§rden
def ask_openai(data: dict, industry: str = "") -> str:
    try:
        client = openai.OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
        prompt = f"""
Du √§r en avancerad AI-f√∂rs√§kringsr√•dgivare med djup branschkunskap. Din uppgift √§r att:
Analysera ett f√∂rs√§kringsdokument f√∂r ett f√∂retag.
Du ska:
1. Kommentera f√∂r- och nackdelar utifr√•n det skydd och de risker som dokumentet beskriver.
2. Ge f√∂rb√§ttringsf√∂rslag som om du vore f√∂rs√§kringsm√§klare ‚Äì konkret, praktiskt och branschanpassat.
3. Utel√§mna formalia och fokusera p√• verkligt skyddsv√§rde och brister.

Data f√∂r bed√∂mning:
- Bransch: {industry}
- Premie: {data.get('premie', 'ok√§nd')} kr
- Sj√§lvrisk: {data.get('sj√§lvrisk', 'ok√§nd')}
- Karens: {data.get('karens', 'ok√§nd')}
- Ansvarstid: {data.get('ansvarstid', 'ok√§nd')}
- Maskiner: {data.get('maskiner', 'ok√§nd')} kr
- Produktansvar: {data.get('produktansvar', 'ok√§nd')} kr
- GDPR ansvar: {data.get('gdpr_ansvar', 'ok√§nd')} kr
- Byggnad: {data.get('byggnad', 'ok√§nd')} kr
- R√§ttsskydd: {data.get('r√§ttsskydd', 'ok√§nd')} kr

G√∂r en √∂versikt:
1. F√∂rdelar
2. Risker / svagheter
3. F√∂rb√§ttringsf√∂rslag (max 3 punkter, svenska)
"""

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Du √§r en f√∂rs√§kringsexpert."},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        return f"[AI-fel] {str(e)}"


# üîπ GPT-3.5 f√∂r AI-baserad extraktion fr√•n fri text i PDF:er
def ask_openai_extract(text: str) -> dict:
    try:
        client = openai.OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
        prompt = f"""
Texten nedan kommer fr√•n ett f√∂rs√§kringsbrev eller offert.
Identifiera och extrahera s√• korrekt som m√∂jligt de f√∂ljande f√§lten och returnera som JSON:

- premie (float)
- sj√§lvrisk (float i kronor, v√§lj den viktigaste om flera anges)
- karens (str)
- ansvarstid (str, i m√•nader eller √•r)
- maskiner (float)
- produktansvar (float)
- byggnad (float)
- r√§ttsskydd (float)
- gdpr_ansvar (float)

Format:
{{
  "premie": ...,
  "sj√§lvrisk": ...,
  "karens": "...",
  "ansvarstid": "...",
  "maskiner": ...,
  "produktansvar": ...,
  "byggnad": ...,
  "r√§ttsskydd": ...,
  "gdpr_ansvar": ...
}}

Text:
{text}
"""
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Du √§r en expert p√• att tolka f√∂rs√§kringsvillkor."},
                {"role": "user", "content": prompt}
            ],
            response_format="json"
        )

        return json.loads(response.choices[0].message.content)

    except Exception as e:
        return {
            "premie": 0.0,
            "sj√§lvrisk": 0.0,
            "karens": "saknas",
            "ansvarstid": "saknas",
            "maskiner": 0.0,
            "produktansvar": 0.0,
            "byggnad": 0.0,
            "r√§ttsskydd": 0.0,
            "gdpr_ansvar": 0.0,
            "fel": f"[GPT-fel] {str(e)}"
        }
